#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ CrewAI –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ A2A –ø—Ä–æ—Ç–æ–∫–æ–ª
"""

import requests
import json
import base64
import argparse
from PIL import Image
import io
import os
from datetime import datetime

def test_health(base_url):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç–∞"""
    url = f"{base_url}/a2a/healthz"
    try:
        response = requests.get(url, timeout=10)  # –î–æ–¥–∞–Ω–æ —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        if response.status_code == 200:
            print("‚úÖ –ê–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é—î")
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code}, {response.text}")
            return False
    except requests.RequestException as e:  # –ë—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –≤–∏–Ω—è—Ç–æ–∫
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(e)}")
        return False

def get_metadata(base_url):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –∞–≥–µ–Ω—Ç–∞"""
    url = f"{base_url}/a2a/metadata"
    try:
        response = requests.get(url, timeout=10)  # –î–æ–¥–∞–Ω–æ —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        if response.status_code == 200:
            print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω—ñ –∞–≥–µ–Ω—Ç–∞:")
            print(json.dumps(response.json(), indent=2))
            return response.json()
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code}, {response.text}")
            return None
    except requests.RequestException as e:  # –ë—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –≤–∏–Ω—è—Ç–æ–∫
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(e)}")
        return None

def generate_image(base_url, prompt, output_dir="./generated_images"):
    """–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    url = f"{base_url}/a2a/task"
    
    payload = {
        "input": {
            "prompt": prompt
        }
    }
    
    print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç: '{prompt}'")
    
    try:
        response = requests.post(url, json=payload, timeout=30)  # –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
        
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code}, {response.text}")
            return None
        
        data = response.json()
        print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{data['result']}'")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(output_dir, exist_ok=True)
        
        # –Ø–∫—â–æ —î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        if data["artifacts"]:
            print(f"üñºÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(data['artifacts'])} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
            artifact = data["artifacts"][0]
            image_data = artifact["data"]
            
            # –î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è Base64 —É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_bytes = base64.b64decode(image_data)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É
            image_id = extract_image_id(data["result"])
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if image_id:
                filename = f"{output_dir}/{timestamp}_{image_id}.png"
            else:
                filename = f"{output_dir}/{timestamp}_image.png"
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –¥–∏—Å–∫
            with open(filename, "wb") as f:
                f.write(image_bytes)
            
            print(f"üíæ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{filename}'")
            
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ PIL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)
            try:
                image = Image.open(io.BytesIO(image_bytes))
                print(f"üìä –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image.width}x{image.height}")
            except (IOError, ValueError) as e:  # –ë—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –≤–∏–Ω—è—Ç–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}")
            
            return image_id
        else:
            print("‚ö†Ô∏è –£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ (–∑–æ–±—Ä–∞–∂–µ–Ω—å)")
            return None
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(e)}")
        return None

def edit_image(base_url, image_id, edit_prompt, output_dir="./generated_images"):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    prompt = f"–í—ñ–¥—Ä–µ–¥–∞–≥—É–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ image_id: {image_id}, {edit_prompt}"
    return generate_image(base_url, prompt, output_dir)

def extract_image_id(text):
    """–í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É"""
    import re
    
    # –®—É–∫–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ —Ç–∏–ø—É "ID: abc-123" –∞–±–æ "with ID: abc-123"
    match = re.search(r'ID:\s*([a-f0-9-]+)', text, re.IGNORECASE)
    if match:
        return match.group(1)
    
    # –®—É–∫–∞—î–º–æ UUID –≤ —Ç–µ–∫—Å—Ç—ñ
    uuids = re.findall(r'([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})', text)
    if uuids:
        return uuids[0]
    
    return None

def get_image_by_id(base_url, image_id, output_dir="./generated_images"):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID"""
    url = f"{base_url}/image/{image_id}"
    
    try:
        response = requests.get(url, timeout=10)  # –î–æ–¥–∞–Ω–æ —Ç–∞–π–º–∞—É—Ç
        
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status_code}, {response.text}")
            return False
        
        data = response.json()
        
        if "image" in data:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
            os.makedirs(output_dir, exist_ok=True)
            
            # –î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è Base64 —É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_bytes = base64.b64decode(data["image"])
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{output_dir}/{timestamp}_fetched_{image_id}.png"
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –¥–∏—Å–∫
            with open(filename, "wb") as f:
                f.write(image_bytes)
            
            print(f"üíæ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ '{filename}'")
            return True
        else:
            print("‚ö†Ô∏è –£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(e)}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CrewAI –∞–≥–µ–Ω—Ç–∞ –∑ A2A –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º")
    parser.add_argument("--url", type=str, default="http://localhost:10001", help="–ë–∞–∑–æ–≤–∏–π URL –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--output", type=str, default="./generated_images", help="–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    subparsers = parser.add_subparsers(dest="command", help="–ü—ñ–¥–∫–æ–º–∞–Ω–¥–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ health
    subparsers.add_parser("health", help="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç–∞")
    
    # –ö–æ–º–∞–Ω–¥–∞ metadata
    subparsers.add_parser("metadata", help="–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –∞–≥–µ–Ω—Ç–∞")
    
    # –ö–æ–º–∞–Ω–¥–∞ generate
    generate_parser = subparsers.add_parser("generate", help="–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    generate_parser.add_argument("prompt", type=str, help="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ edit
    edit_parser = subparsers.add_parser("edit", help="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    edit_parser.add_argument("image_id", type=str, help="ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    edit_parser.add_argument("prompt", type=str, help="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ get
    get_parser = subparsers.add_parser("get", help="–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ ID")
    get_parser.add_argument("image_id", type=str, help="ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ demo
    demo_parser = subparsers.add_parser("demo", help="–ü–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞")
    demo_parser.add_argument("--prompt", type=str, default="–ù–∞–º–∞–ª—é–π –∫—Ä–∞—Å–∏–≤–∏–π –ø–µ–π–∑–∞–∂ –∑ –≥–æ—Ä–∞–º–∏ —Ç–∞ –æ–∑–µ—Ä–æ–º", 
                          help="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    demo_parser.add_argument("--edit-prompt", type=str, default="–¥–æ–¥–∞–π –Ω–∞ –Ω–µ–±—ñ –≤–µ—Å–µ–ª–∫—É", 
                          help="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == "health":
        test_health(args.url)
    
    elif args.command == "metadata":
        get_metadata(args.url)
    
    elif args.command == "generate":
        generate_image(args.url, args.prompt, args.output)
    
    elif args.command == "edit":
        edit_image(args.url, args.image_id, args.prompt, args.output)
    
    elif args.command == "get":
        get_image_by_id(args.url, args.image_id, args.output)
    
    elif args.command == "demo":
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞")
        print("-" * 50)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
        if not test_health(args.url):
            return
        
        print("-" * 50)
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        get_metadata(args.url)
        
        print("-" * 50)
        
        # –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        print("üé® –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        image_id = generate_image(args.url, args.prompt, args.output)
        
        if not image_id:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return
        
        print("-" * 50)
        
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        print(f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ ID: {image_id}")
        edited_image_id = edit_image(args.url, image_id, args.edit_prompt, args.output)
        
        print("-" * 50)
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ ID
        if edited_image_id:
            print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ ID: {edited_image_id}")
            get_image_by_id(args.url, edited_image_id, args.output)
        
        print("-" * 50)
        print("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
